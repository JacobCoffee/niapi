[tool.poetry]
name = "niapi"
version = "0.5.0"
description = "Network Data API"
authors = ["Jacob Coffee <jacob@z7x.org>"]
maintainers = [
    "Jacob Coffee <jacob@z7x.org>",
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/JacobCoffee/niapi"
repository = "https://github.com/JacobCoffee/niapi"
documentation = "https://jacobcoffee.github.io/niapi/index.html"
keywords = [
    "niapi",
    "network",
    "api",
    "tool",
    "rest",
    "http",
    "asgi",
    "pydantic",
    "litestar",
    "starlite",
    "websocket",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Framework :: AsyncIO",
#    Pending trove-classifiers#148
#    "Framework :: Litestar",
#    "Framework :: Litestar :: 2",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Internet",
    "Topic :: System :: Networking",
]
include = ["CHANGELOG.rst"]
packages = [{ include = "app" }]

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/JacobCoffee/niapi/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc"
"Changelog" = "https://github.com/JacobCoffee/niapi/releases/"
"Twitter" = "https://twitter.com/_scriptr"
"Reddit" = "https://www.reddit.com/u/monorepo"

[tool.poetry.scripts]
app = "litestar.__main__:run_cli"

[tool.poetry.plugins."litestar.commands"]
run-all = "app.cli:run_all_app"

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
litestar = {version = "2.0b2", extras = ["standard", "structlog", "prometheus"]}
python-dotenv = "^1.0.0"
poetry = "^1.5.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
coverage = "^7.2.7"
pytest-benchmark = "^4.0.0"
pytest-cov = "^4.1.0"
pytest-docker = "^1.0.1"
pytest-dotenv = "^0.5.2"
pytest-mock = "^3.11.1"
hypothesis = "^6.79.2"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = "^23.3.0"
ruff = "^0.0.275"
codespell = "^2.2.5"
mypy = "^1.4.0"
shellcheck-py = "^0.9.0.5"
slotscheck = "^0.16.5"
pre-commit = "^3.3.3"
pytailwindcss = "^0.2.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.1"
sphinx-autobuild = "^2021.3.14"
sphinx-copybutton = "^0.5.2"
pydata-sphinx-theme = "^0.13.3"
sphinx-click = "^4.4.0"
sphinxcontrib-confluencebuilder = "^2.1.1"
sphinx-toolbox = "^3.4.0"
autodoc-pydantic = "^1.8.0"
blacken-docs = "^1.14.0"
sphinxcontrib-mermaid = "^0.9.2"

[build-system]
requires = ["poetry-core>=1.5.1"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.codespell]
ignore-words-list = "selectin, alog"
skip = 'poetry.lock'

[tool.mypy]
plugins = [
    "pydantic.mypy",
]
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true
exclude = '''
    (?x)(
        ^build/
        | ^dist/
        | ^.venv/
    )
'''

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_decorators = false

[pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = ["structlog.*", "uvicorn.*", ]
ignore_missing_imports = true

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError as e:',
    'except ImportError:',
    '\.\.\.',
    'raise NotImplementedError',
]

[tool.pytest.ini_options]
#asyncio_mode = "auto"

[tool.slotscheck]
strict-imports = false

[tool.ruff]
select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
ignore = [
    "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",    # pydocstyle - missing docstring in public module
    "D101",    # pydocstyle - missing docstring in public class
    "D102",    # pydocstyle - missing docstring in public method
    "D103",    # pydocstyle - missing docstring in public function
    "D104",    # pydocstyle - missing docstring in public package
    "D105",    # pydocstyle - missing docstring in magic method
    "D106",    # pydocstyle - missing docstring in public nested class
    "D107",    # pydocstyle - missing docstring in __init__
    "D202",    # pydocstyle - no blank lines allowed after function docstring
    "D205",    # pydocstyle - 1 blank line required between summary line and description
    "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",    # pycodestyle line too long, handled by black
    "PLW2901", # pylint - for loop variable overwritten by assignment target
    "RUF012",  # Ruff-specific rules - classvar
]
line-length = 120
src = ["app", "tests", "docs/examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.root_validator",
    "pydantic.validator",
]

[tool.ruff.isort]
known-first-party = ["app", "tests"]

[tool.ruff.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT"]
